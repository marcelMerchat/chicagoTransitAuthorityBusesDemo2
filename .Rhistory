}
if(word_separation==4){
df <- data.frame(data[,1],data[,5])
colnames(df) <- c("word_1","word_2")
df
}
ok <- complete.cases(df)
df[ok,]
}
##  Get word colmuns from training set
get_training_columns <- function(string_vector,n=1){
#n<-2
#string_vector <- df[,1]
string_vector <- as.character(string_vector)
applied <- lapply(string_vector,function(x) {strsplit(x, "\\s+")[[1]][1]})
first_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
if(n>1){
applied <- lapply(string_vector, function(x) {strsplit(x, "\\s+")[[1]][2]})
second_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
df <- data.frame(first_word,second_word)
}
if(n>2){
applied <- lapply(string_vector,function(x) {strsplit(x, "\\s+")[[1]][3]})
third_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
df <- data.frame(first_word,second_word,third_word)
}
if(n>3){
applied <- lapply(string_vector, function(x) {strsplit(x, "\\s+")[[1]][4]})
fourth_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
df <- data.frame(first_word,second_word,third_word,fourth_word)
}
if(n>4){
applied <- lapply(string_vector,
function(x) {strsplit(x, "\\s+")[[1]][5]})
fifth_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
df <- data.frame(first_word,second_word,third_word,fourth_word,fifth_word)
}
if(n>5){
applied <- lapply(string_vector,
function(x) {strsplit(x, "\\s+")[[1]][6]})
sixth_word <- unlist(Filter(function(x) !identical(character(0),x), applied))
df <- data.frame(first_word,second_word, third_word, fourth_word, fifth_word, sixth_word)
}
na.omit(df)
}
# word_frame <- traincolumns
get_2gram_table <- function(word_frame, minimum_word_count=2){
pair12 <- word_frame[,c(1,2)]
colnames(pair12) <- c("word_1","word_2")
pair23 <- word_frame[,c(2,3)]
colnames(pair23) <- c("word_1","word_2")
pair34 <- word_frame[,c(3,4)]
colnames(pair34) <- c("word_1","word_2")
pair45 <- word_frame[,c(4,5)]
colnames(pair45) <- c("word_1","word_2")
pair56 <- word_frame[,c(5,6)]
colnames(pair56) <- c("word_1","word_2")
pairs <- rbind(pair12,pair23,pair34,pair45,pair56)
lines <- get_concatenated_strings(pairs)
#length(lines)
table2 <- table(lines)
#sorted <- sort(table2, decreasing=TRUE)
popular_phrases <-  table2[table2>=minimum_word_count]
df <- data.frame(popular_phrases,stringsAsFactors = FALSE)
wordcols <- get_training_columns(df[,1],n=2)
wordcols$Freq <- df$Freq
puncts1 <- grepl("[a-zA-Z]",wordcols[,"first_word"])
wordcols <- wordcols[puncts1,]
head(wordcols)
puncts1 <- grepl("''",wordcols[,"first_word"])
wordcols <- wordcols[!puncts1,]
head(wordcols)
#     puncts1 <- grepl("^'",wordcols[,"first_word"])
#     wordcols <- wordcols[!puncts1,]
#     tail(wordcols,10)
#
#     puncts2 <- grepl("'$",wordcols[,"first_word"])
#     wordcols <- wordcols[!puncts2,]
wordcols <- wordcols[order(-wordcols[,3]),]
wordcols
}
get_2gram_sep <- function(word_frame, sep=1, minimum_word_count=1){
if(sep==1){
pair13 <- word_frame[,c(1,3)]
colnames(pair13) <- c("word_1","word_2")
pair24 <- word_frame[,c(2,4)]
colnames(pair24) <- c("word_1","word_2")
pair35 <- word_frame[,c(3,5)]
colnames(pair35) <- c("word_1","word_2")
pair46 <- word_frame[,c(4,6)]
colnames(pair46) <- c("word_1","word_2")
pairs <- rbind(pair13,pair24,pair35,pair46)
}
if(sep==2){
pair14 <- word_frame[,c(1,4)]
colnames(pair14) <- c("word_1","word_2")
pair25 <- word_frame[,c(2,5)]
colnames(pair25) <- c("word_1","word_2")
pair36 <- word_frame[,c(3,6)]
colnames(pair36) <- c("word_1","word_2")
pairs <- rbind(pair14,pair25,pair36)
}
if(sep==3){
pair15 <- word_frame[,c(1,5)]
colnames(pair15) <- c("word_1","word_2")
pair26 <- word_frame[,c(2,6)]
colnames(pair26) <- c("word_1","word_2")
pairs <- rbind(pair15,pair26)
}
if(sep==4){
pair16 <- word_frame[,c(1,6)]
colnames(pair16) <- c("word_1","word_2")
pairs <- pair16
}
lines <- get_concatenated_strings(pairs)
table2 <- table(lines)
popular_phrases <- table2[table2>=minimum_word_count]
df <- data.frame(popular_phrases,stringsAsFactors = FALSE)
wordcols <- get_training_columns(df[,1],n=2)
wordcols$Freq <- as.numeric(as.character(df$Freq))
#puncts1[1:100]
puncts1 <- grepl("[a-zA-Z]",wordcols[,"first_word"])
sum(puncts1)
wordcols <- wordcols[puncts1,]
head(wordcols)
dim(wordcols)[1]
puncts1 <- grepl("''",wordcols[,"first_word"])
wordcols <- wordcols[!puncts1,]
head(wordcols)
puncts1 <- grepl("^'",wordcols[,"first_word"])
wordcols <- wordcols[!puncts1,]
tail(wordcols,10)
puncts1 <- grepl("'$",wordcols[,"first_word"])
wordcols <- wordcols[!puncts1,]
wordcols <- wordcols[order(-wordcols[,3]),]
wordcols
}
get_3gram_table <- function(word_frame, minimum_word_count=1){
triple123 <- word_frame[,c(1,2,3)]
colnames(triple123) <- c("word_1","word_2","word_3")
triple234 <- word_frame[,c(2,3,4)]
colnames(triple234) <- c("word_1","word_2","word_3")
triple345 <- word_frame[,c(3,4,5)]
colnames(triple345) <- c("word_1","word_2","word_3")
triple456 <- word_frame[,c(4,5,6)]
colnames(triple456) <- c("word_1","word_2","word_3")
triple <- rbind(triple123,triple234,triple345,triple456)
lines <- get_concatenated_triple_strings(triple)
table3 <- table(lines)
popular_phrases <- table3[table3>=minimum_word_count]
df <- data.frame(popular_phrases ,stringsAsFactors = FALSE)
wordcols <- get_training_columns(df[,1],n=3)
wordcols$first_word <- as.character(wordcols$first_word)
wordcols$second_word <- as.character(wordcols$second_word)
wordcols$third_word <- as.character(wordcols$third_word)
wordcols$Freq <- as.numeric(as.character(df$Freq))
wordcols[order(-wordcols[,4]),]
}
get_4_gram_table <- function(lines, minimum_word_count=1){
pattern <- "[a-zA-Z']{1,18}[ +]{1,2}[a-zA-Z']{1,18}[ +]{1,2}[a-zA-Z']{1,18}[ +]{1,2}[a-zA-Z']{1,18}"
any4 <- findmatchgreg(lines,pattern)
table4 <- table(any4)
#sorted <- sort(table, decreasing=TRUE)
popular_phrases <- table4[table4>=minimum_word_count]
data.frame(popular_phrases)
}
get_separated_pairs <- function(lines,sep=-1){
if(sep==-1 | sep==2){
skip2 <- get_2gram_skip_n(lines,2)
skip2
}
if(sep==-1 | sep==3){
skip3 <- get_2gram_skip_n(lines,3)
skip3
}
if(sep==-1 | sep==4){
skip4 <- get_2gram_skip_n(lines,4)
skip4
}
if(sep==-1){
##  Return vector of 2-grams
rbind(skip1,skip2,skip3,skip4)
}
}
removeMostPunctuation <- function (x, keep="'")
{
x <- gsub(keep, "\002", x)
x <- gsub("[[:punct:]]+", "", x)
gsub("\002", keep, x, fixed = TRUE)
}
get_concatenated_strings<- function(pair_table=data.frame(c("word11","word21"),
c("word12","word22")),
str_vector_1=c("a"),str_vector_2=c("b")){
if(pair_table[1,1]!="word11"){
len1 <- length(str_vector_1)
len2 <- length(str_vector_2)
} else {
len1 <- length(pair_table[,1])
len2 <- length(pair_table[,2])
}
if(pair_table[1,1]=="word11"){
if(len1 != len2){
print("Vectors have unequal lengths at get_concatenated_strings")
return("Vectors have unequal lengths at get_concatenated_strings")
} else {
paste(str_vector_1,str_vector_2)}
} else {
paste(pair_table[,1],pair_table[,2])
}
}
get_concatenated_triple_strings<- function(pair_table=data.frame(c("word11","word21","word31"),
c("word12","word22","word32")),
str_vector_1=c("a"),str_vector_2=c("b"),str_vector_3=c("c")){
if(pair_table[1,1]!="word11"){
len1 <- length(str_vector_1)
len2 <- length(str_vector_2)
len3 <- length(str_vector_3)
} else {
len1 <- length(pair_table[,1])
len2 <- length(pair_table[,2])
len3 <- length(pair_table[,3])
}
if(pair_table[1,1]=="word11"){
if(len1 != len2){
print("Vectors have unequal lengths at get_concatenated_strings")
return("Vectors have unequal lengths at get_concatenated_strings")
} else {
paste(str_vector_1,str_vector_2, str_vector_2)}
} else {
paste(pair_table[,1],pair_table[,2], pair_table[,3])
}
}
get_2gram_choices <- function(word, minimum=4){
#minimum <- 2
word <- gsub("^ +\\b", "", word)
word <- gsub("\\b +$", "", word)
ispunct <- grepl("''",gram2[,"first_word"])
gram2 <- gram2[ispunct!=TRUE,]
choices <- gram2[gram2[,"first_word"] == word,]
choices <- choices[choices[,3]>=minimum,]
numberofchoices <- dim(choices)[1]
if(numberofchoices < minimum){
choices <- head(gram2[gram2[,"first_word"]=="the",])[1:3,]
}
choices
}
get_3gram_choices <- function(phrase, minimum=2){
#minimum <- 2
back <- reverse_word_order(phrase)
##  Get 3-grams
choices <- gram3[gram3[,"first_word"] == back[2] & gram3[,"second_word"] == back[1] ,]
choices <- choices[choices[,4]>=minimum,]
numberofchoices <- dim(choices)[1]
if(numberofchoices < minimum){
choices <- gram2[gram2[,"first_word"]==back[1] ,]
}
choices
}
remove_words <- function(phrase){
#phrase <- "i am going to go home"
phrase <- tolower(phrase)
no_words <- !grepl("[a-zA-Z]",phrase)
atleasttwo <- grepl("[a-zA-Z,] [a-zA-Z,]",phrase)
if(no_words==TRUE){
choicedf1 <- gram1
short <- "no words"
} else {                                        # one or more
phrase <- removeMostPunctuation(phrase)
word_vec <- strsplit(phrase, "\\s+")[[1]]
lenwordvec <- length(word_vec)
short_phrase_length <- ceiling(runif(1, min = 1.001, max = (lenwordvec - 0.001)))
back <- reverse_word_order(phrase)
back <- back[short_phrase_length:lenwordvec]
back <- reverse_word_order(back)
paste0(back, collapse=" ")
}
}
bestpick <- function(phrase){
#phrase <- "Very early observations on the Bills game: Offense still struggling but the "
#phrase <- "Go on a romantic date at the xyz"
phrase <- tolower(phrase)
no_words <- !grepl("[a-zA-Z]",phrase)
atleasttwo <- grepl("[a-zA-Z,] [a-zA-Z,]",phrase)
if(no_words==TRUE){
choicedf1 <- gram1
choicedf <- choicedf1
bestchoice1 <<- choicedf1[1,1]
bestchoice2 <<- choicedf1[2,1]
bestchoice3 <<- choicedf1[3,1]
choice_table  <<- choicedf
} else {                                        # one or more
phrase <- removeMostPunctuation(phrase)
word_vec <- strsplit(phrase, "\\s+")[[1]]
lenwordvec <- length(word_vec)
back <- reverse_word_order(phrase)
diff <- setdiff(back[3:lenwordvec], short400)
lastwordcheck <- intersect(back[1], short400)
stripped <- c(back[1:2], diff)
striplen <- length(stripped)
if(lenwordvec==1) {
oneword <- gsub(" +", "", phrase)           # one word
choicedf2 <- get_2gram_choices(oneword)
choicedf2 <- choicedf2[order(-choicedf2$Freq),]
choicedf <- choicedf2
bestchoice1 <<- choicedf2[1,2]
bestchoice2 <<- choicedf2[2,2]
bestchoice3 <<- choicedf2[3,2]
choice_table  <<- choicedf
} else if(lenwordvec==2 | striplen < 4 | identical(lastwordcheck, character(0))){                       # two words
choicedf3 <- get_3gram_choices(phrase)
choicedf3 <- choicedf3[order(-choicedf3$Freq),]
choicedf <- choicedf3
bestchoice1 <<- choicedf3[1,3]
bestchoice2 <<- choicedf3[2,3]
bestchoice3 <<- choicedf3[3,3]
choice_table  <<- choicedf
} else {                                   # three or more
##  last character
last_char_is_space <- grepl("[ .]$", phrase)
##    Three grams
choicesdf3 <- get_3gram_choices(phrase)
number_of_3_grams <- dim(choicesdf3)[1]
if(number_of_3_grams == 0){
choicedf <- gram3[1:10,]
} else {
choices3 <- choicesdf3[order(-choicesdf3$Freq),]
number_of_3_grams <- dim(choices3)[1]
minqty <- 2
choices3 <- choices3[choices3$Freq >= minqty,]
if(number_of_3_grams > 0 & number_of_3_grams < 5){
choices3 <- choices3[1:3,]
} else if(number_of_3_grams > 4){
choices3 <- choices3[1:5,]
}
choicedf <- choices3
###################################################################
choices_in_dictionary <- intersect(choices3[,3],gram1$anyword)
choices1 <- choices_in_dictionary
}
###################################################################
number_of_lookback_words <- length(back)
lookback_count <- number_of_lookback_words - 1
loop_count <- 1:lookback_count
datadf <- 0
datadf <- list()
columnnames <- 0
####################################################################
backshort <- setdiff(back, short400)
backlen <- length(backshort)
if(backlen > 0){
for(i in seq_along(backshort)){
back_wordfreq <- 0
datavector <- 0
for(j in seq_along(choices1)){
datavector[j] <- sum(gram2[#(gram2$first_word==backshort[i] &
(gram2$second_word==backshort[i] &
gram2$first_word==choices1[j])
|
(gram2$first_word==backshort[i] &
gram2$second_word==choices1[j])
|
(gram2$second_word==backshort[i] &
gram2$first_word==choices1[j])
,"Freq"])
}
specialsymbol <- "$"
columnnames[i] <- paste("back",i,sep="")
datadf[[i]] <- datavector
}
##############################################################
results <- as.matrix(sapply(datadf, as.numeric))
backshortlength <- dim(results)[2]
rowtotals <- apply(results, 1, sum)
coltotals <- apply(results, 2, sum)
if(backshortlength==1){
resultsdf <- data.frame(choices1,rowtotals,results[,1])
colnames(resultsdf) <-  c("choices","rowtotals",columnnames[1])
}
if(backshortlength==2){
resultsdf <- data.frame(choices1,rowtotals,results[,1],
results[,2])
colnames(resultsdf) <-  c("choices","rowtotals",columnnames[1],
columnnames[2])
} else if (backshortlength>2){
resultsdf <- data.frame(choices1,rowtotals,results[,1],
results[,2],results[,3])
colnames(resultsdf) <-  c("choices","rowtotals",columnnames[1],
columnnames[2],columnnames[3])
}
#######################################################################
lenresults <- dim(resultsdf)[1]
out_vec <- as.character(resultsdf[,1][1:lenresults])
probs <- unlist(lapply(out_vec, function(x){gram1[gram1$anyword==x,"Freq"][[1]][1]}))
#probs <- unlist(lapply(out_vec, function(x){gram1[gram1$anyword==x,"Freq"][[1]][1]}))
wordsvec <- resultsdf[1:lenresults,1]
oddsvec <- resultsdf[1:lenresults,2]/probs[1:lenresults]
output <- data.frame(wordsvec,oddsvec)
punct <- grepl("[[:punct:]]",wordsvec)
output <- output[punct==FALSE,]
choicedf <- output[order(-output$oddsvec),]
bestchoice1 <<- as.character(choicedf[1,1])
bestchoice2 <<- as.character(choicedf[2,1])
bestchoice3 <<- as.character(choicedf[3,1])
choice_table <<- choicedf
} #word selection algorithym
} #word selection algorithym with no matches
} # no words
choicedf
}
library(xtable)
?xtable
#grid.arrange(x1, x1, ncol = 2)
?setMethod
library(methods)
# Creating new classes/methods is usually not something done at the console; you likely want to save
# the code in a separate file
setClass("polygon",
representation(x = "numeric",
y = "numeric"))
# The slots for this class are xand y
# The slots for an S4 object can be accessed with the @ operator.
showMethods("plot")
## Function: plot (package graphics)
## x="ANY"
## x="polygon"
p <- new("polygon", x = c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(p)
head(getS3method("mean", "default"), 10)
?logical
?or
??or
?setClass
setClass("polygon",
representation(x = "numeric",
y = "numeric"))
# The slots for this class are xand y
# The slots for an S4 object can be accessed with the @ operator.
showMethods("plot")
## Function: plot (package graphics)
## x="ANY"
## x="polygon"
p <- new("polygon", x = c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(p)
setMethod("plot", "polygon",
function(x, y, ...) {
plot(x@x, x@y, type = "n", ...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp, yp)
})
## Creating a generic function for 'plot' from package 'graphics' in the global environment
## [1] "plot"
#Notice that the slots of the polygon (the x- and y-coordinates) are accessed with the @ operator.
# After calling setMethod the new plot method will be added to the list of methods for plot.
# Notice that the signature for class polygon is listed. The method for ANY is the default method and it
# is what is called when now other signature matches
library(methods)
# Creating new classes/methods is usually not something done at the console; you likely want to save
# the code in a separate file
setClass("polygon",
representation(x = "numeric",
y = "numeric"))
# The slots for this class are xand y
# The slots for an S4 object can be accessed with the @ operator.
showMethods("plot")
## Function: plot (package graphics)
## x="ANY"
## x="polygon"
p <- new("polygon", x = c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(p)
setClass("polygonwithslots",
slots(x = "numeric",
y = "numeric"))
?setClass
setClass("polygonwithslots",
slots = c(x = "numeric",
y = "numeric"))
pws <- new("polygonwithslots", slots = c(x = c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(pws)
polywithslots <- setClass("polywithslots",
slots = c(x="numeric", y="numeric"))
polywithslots <- setClass("polywithslots",
slots = c(x="numeric", y="numeric"))
pws <- polywithslots, slots = c(x= c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(pws)
pws <- polywithslots(slots = c(x= c(1, 2, 3, 4), y = c(1, 2, 3, 1)))
plot(pws)
pws <- polywithslots(c(x= c(1, 2, 3, 4), y = c(1, 2, 3, 1)))
plot(pws)
pws <- polywithslots(x=c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(pws)
polywithslots <- setClass("polywithslots",
slots = c(x="numeric", y="numeric"))
showMethods("plot")
## Function: plot (package graphics)
## x="ANY"
## x="polygon"
p <- new("polygon", x = c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(p)
pws <- polywithslots(x=c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(pws)
pws <- polywithslots(x=c(1, 2, 3, 4), y = c(1, 2, 3, 1))
pws
?setClass
plot(pws)
polywithslots <- setClass("polywithslots",
slots = c(x="double", y="double"))
pws <- polywithslots(x=c(1, 2, 3, 4), y = c(1, 2, 3, 1))
plot(pws)
pws
shiny::runApp('edu/Data Science/Data Products/dashboard/086-bus-dashboard')
shiny::runApp()
